// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios17.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DevNetworking
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import DevNetworking
import Foundation
import Network
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum NetworkError : Swift.Error, Swift.Equatable {
  case notFound
  case forbidden
  case unauthorized
  case invalidRequest(code: Swift.Int, message: Swift.String?)
  case serverError(code: Swift.Int, message: Swift.String?)
  case custom(code: Swift.Int, message: Swift.String?)
  case cancelled
  case requestParsingFailed
  case responseParsingFailed
  case noResponseData
  case unknown
  public init?(code: Swift.Int, message: Swift.String?)
  public init?(urlResponse: Foundation.HTTPURLResponse)
  public init(error: Foundation.NSError)
  public static func == (a: DevNetworking.NetworkError, b: DevNetworking.NetworkError) -> Swift.Bool
}
final public class AddAuthenticationTokenNetworkModuleAction : DevNetworking.NetworkModuleAction {
  public init(authenticationTokenProvider: any DevNetworking.AuthenticationTokenProvider, authenticationTokenHeaderFieldName: Swift.String)
  final public func performBeforeExecutingNetworkRequest(request: (any DevNetworking.NetworkRequest)?, urlRequest: inout Foundation.URLRequest)
  @objc deinit
}
public protocol QueueExecutor {
  var type: DevNetworking.QueueExecutorType { get }
  func execute(_ block: @escaping () -> Swift.Void)
}
extension DevNetworking.QueueExecutor {
  public func execute(_ block: @escaping () -> Swift.Void)
}
public struct NetworkResponse : Swift.Equatable {
  public let data: Foundation.Data?
  public let networkResponse: Foundation.HTTPURLResponse
  public static func == (a: DevNetworking.NetworkResponse, b: DevNetworking.NetworkResponse) -> Swift.Bool
}
extension DevNetworking.NetworkResponse {
  public func decoded<T>(into responseType: T.Type, decoder: Foundation.JSONDecoder = JSONDecoder()) -> Swift.Result<T, DevNetworking.NetworkError> where T : Swift.Decodable
}
final public class DefaultNetworkModule : DevNetworking.NetworkModule {
  public init(requestBuilder: any DevNetworking.RequestBuilder, urlSession: any DevNetworking.NetworkSession = URLSession.shared, actions: [any DevNetworking.NetworkModuleAction] = [], completionExecutor: any DevNetworking.QueueExecutor = MainQueueExecutor())
  @discardableResult
  final public func perform(request: any DevNetworking.NetworkRequest, completion: ((Swift.Result<DevNetworking.NetworkResponse, DevNetworking.NetworkError>) -> Swift.Void)?) -> Foundation.URLSessionTask?
  @discardableResult
  final public func perform(urlRequest: Foundation.URLRequest, completion: ((Swift.Result<DevNetworking.NetworkResponse, DevNetworking.NetworkError>) -> Swift.Void)?) -> Foundation.URLSessionTask
  @objc deinit
}
public protocol NetworkSession : AnyObject {
  #if compiler(>=5.3) && $Sendable
  func dataTask(with request: Foundation.URLRequest, completionHandler: @escaping @Sendable (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionDataTask
  #endif
}
extension Foundation.URLSession : DevNetworking.NetworkSession {
}
public protocol RequestBuilder : AnyObject {
  func build(request: any DevNetworking.NetworkRequest) -> Foundation.URLRequest?
}
final public class DefaultRequestBuilder : DevNetworking.RequestBuilder {
  public init(baseURL: Foundation.URL)
  final public func build(request: any DevNetworking.NetworkRequest) -> Foundation.URLRequest?
  @objc deinit
}
public enum NetworkRequestType : Swift.Equatable {
  case get
  case post
  case delete
  case put
  case patch
  case custom(Swift.String)
  public static func == (a: DevNetworking.NetworkRequestType, b: DevNetworking.NetworkRequestType) -> Swift.Bool
}
public enum QueueExecutorType : Swift.Equatable {
  case main
  case backgroundConcurrent
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: DevNetworking.QueueExecutorType, b: DevNetworking.QueueExecutorType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension DevNetworking.QueueExecutorType {
  public var queue: Dispatch.DispatchQueue {
    get
  }
}
public protocol NetworkRequest {
  var path: Swift.String { get }
  var method: DevNetworking.NetworkRequestType { get }
  var cachePolicy: Foundation.NSURLRequest.CachePolicy { get }
  var additionalHeaderFields: [Swift.String : Swift.String] { get }
  var parameters: [Swift.String : Swift.String]? { get }
  var body: (any Swift.Encodable)? { get }
  var bodyData: Foundation.Data? { get }
  var requiresAuthenticationToken: Swift.Bool { get }
}
extension DevNetworking.NetworkRequest {
  public var parameters: [Swift.String : Swift.String]? {
    get
  }
  public var body: (any Swift.Encodable)? {
    get
  }
  public var bodyData: Foundation.Data? {
    get
  }
  public var cachePolicy: Foundation.NSURLRequest.CachePolicy {
    get
  }
  public var additionalHeaderFields: [Swift.String : Swift.String] {
    get
  }
  public var requiresAuthenticationToken: Swift.Bool {
    get
  }
}
public protocol NetworkModuleAction : AnyObject {
  func performBeforeExecutingNetworkRequest(request: (any DevNetworking.NetworkRequest)?, urlRequest: inout Foundation.URLRequest)
  func performAfterExecutingNetworkRequest(request: (any DevNetworking.NetworkRequest)?, networkResponse: DevNetworking.NetworkResponse)
}
extension DevNetworking.NetworkModuleAction {
  public func performBeforeExecutingNetworkRequest(request: (any DevNetworking.NetworkRequest)?, urlRequest: inout Foundation.URLRequest)
  public func performAfterExecutingNetworkRequest(request: (any DevNetworking.NetworkRequest)?, networkResponse: DevNetworking.NetworkResponse)
}
final public class BackgroundQueueExecutor : DevNetworking.QueueExecutor {
  final public let type: DevNetworking.QueueExecutorType
  public init()
  @objc deinit
}
final public class MainQueueExecutor : DevNetworking.QueueExecutor {
  final public let type: DevNetworking.QueueExecutorType
  public init()
  @objc deinit
}
public protocol NetworkErrorConvertible {
  func toNetworkError() -> DevNetworking.NetworkError?
  func toNetworkError(message: Swift.String?) -> DevNetworking.NetworkError?
}
extension DevNetworking.NetworkErrorConvertible {
  public func toNetworkError() -> DevNetworking.NetworkError?
}
extension Swift.Int : DevNetworking.NetworkErrorConvertible {
  public func toNetworkError(message: Swift.String?) -> DevNetworking.NetworkError?
}
extension Foundation.HTTPURLResponse : DevNetworking.NetworkErrorConvertible {
  public func toNetworkError(message: Swift.String?) -> DevNetworking.NetworkError?
}
public protocol AuthenticationTokenProvider {
  var authenticationToken: Swift.String { get }
}
extension Swift.String : DevNetworking.AuthenticationTokenProvider {
  public var authenticationToken: Swift.String {
    get
  }
}
public protocol NetworkModule : AnyObject {
  @discardableResult
  func perform(request: any DevNetworking.NetworkRequest, completion: ((Swift.Result<DevNetworking.NetworkResponse, DevNetworking.NetworkError>) -> Swift.Void)?) -> Foundation.URLSessionTask?
  @discardableResult
  func perform(urlRequest: Foundation.URLRequest, completion: ((Swift.Result<DevNetworking.NetworkResponse, DevNetworking.NetworkError>) -> Swift.Void)?) -> Foundation.URLSessionTask
}
extension DevNetworking.NetworkModule {
  @discardableResult
  public func performAndDecode<T>(request: any DevNetworking.NetworkRequest, responseType: T.Type, decoder: Foundation.JSONDecoder = JSONDecoder(), completion: ((Swift.Result<T, DevNetworking.NetworkError>) -> Swift.Void)?) -> Foundation.URLSessionTask? where T : Swift.Decodable
  @discardableResult
  public func performAndDecode<T>(urlRequest: Foundation.URLRequest, responseType: T.Type, decoder: Foundation.JSONDecoder = JSONDecoder(), completion: ((Swift.Result<T, DevNetworking.NetworkError>) -> Swift.Void)?) -> Foundation.URLSessionTask where T : Swift.Decodable
}
extension DevNetworking.QueueExecutorType : Swift.Hashable {}
